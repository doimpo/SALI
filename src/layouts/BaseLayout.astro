---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import SEO from '../components/SEO.astro';
import GoogleAnalytics from '../components/GoogleAnalytics.astro';

export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  image?: string;
  type?: 'website' | 'article';
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  section?: string;
  tags?: string[];
}

const { 
  title, 
  description,
  keywords,
  image,
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  section,
  tags
} = Astro.props;
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- SEO Component -->
    <SEO 
      title={title}
      description={description}
      keywords={keywords}
      image={image}
      type={type}
      publishedTime={publishedTime}
      modifiedTime={modifiedTime}
      author={author}
      section={section}
      tags={tags}
    />
    
    <!-- Favicon and App Icons -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    
    <!-- DNS Prefetch and Preconnect for Performance -->
    <link rel="dns-prefetch" href="//cdnjs.cloudflare.com">
    <link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin>
    <link rel="preconnect" href="https://www.googletagmanager.com" crossorigin>
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
    
    <!-- Preload Critical Assets -->
    <link rel="preload" href="/assets/css/libraries.css" as="style">
    <link rel="preload" href="/assets/css/style.css" as="style">
    <link rel="preload" href="/assets/fonts/icomoon.woff" as="font" type="font/woff" crossorigin>
    <link rel="preload" href="/assets/fonts/BreweryNo2W01-Regular.woff2" as="font" type="font/woff2" crossorigin>
    <link rel="preload" href="/assets/js/jquery-3.5.1.min.js" as="script">
    
    <!-- Stylesheets -->
    <link rel="stylesheet" href="/assets/css/libraries.css">
    <link rel="stylesheet" href="/assets/css/style.css">
    <link rel="stylesheet" href="/assets/css/sali-custom.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" media="print" onload="this.media='all'">
    <noscript><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"></noscript>
    
    <!-- Critical CSS for Skeleton Loaders -->
    <style>
      /* Skeleton loading animations - Critical CSS */
      .skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: skeleton-wave 1.5s infinite;
      }
      
      @keyframes skeleton-wave {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
      
      /* Image loading transitions */
      img.with-placeholder {
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
      }
      
      img.loaded {
        opacity: 1;
      }
      
      /* Prevent layout shift */
      img[width][height] {
        height: auto;
      }
      
      /* Content loading states */
      .content-loading .skeleton-show {
        display: block;
      }
      
      .content-loading .content-show {
        display: none;
      }
      
      .content-loaded .skeleton-show {
        display: none;
      }
      
      .content-loaded .content-show {
        display: block;
        animation: fade-in 0.3s ease-in-out;
      }
      
      @keyframes fade-in {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }
    </style>

    <!-- Google Analytics -->
    <GoogleAnalytics />
    
    <!-- Google reCAPTCHA v3 -->
    <script is:inline>
      // Store reCAPTCHA site key globally (will be replaced with actual key in production)
      window.RECAPTCHA_SITE_KEY = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY || '';
    </script>
    
    <!-- Web Vitals Tracking -->
    <script is:inline>
      // Track Core Web Vitals
      (function() {
        // Polyfill for reportWebVitals
        function reportWebVitals(metric) {
          // Send to analytics
          if (window.gtag) {
            window.gtag('event', metric.name, {
              event_category: 'Web Vitals',
              value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),
              event_label: metric.id,
              non_interaction: true
            });
          }
          
          // Console log in development
          if (window.location.hostname === 'localhost') {
            console.log('Web Vital:', metric.name, metric.value, metric.rating);
          }
        }

        // Performance observer for LCP
        if ('PerformanceObserver' in window) {
          try {
            const lcpObserver = new PerformanceObserver((list) => {
              const entries = list.getEntries();
              const lastEntry = entries[entries.length - 1];
              reportWebVitals({
                name: 'LCP',
                value: lastEntry.renderTime || lastEntry.loadTime,
                rating: lastEntry.renderTime < 2500 ? 'good' : lastEntry.renderTime < 4000 ? 'needs-improvement' : 'poor',
                id: 'lcp-' + Date.now()
              });
            });
            lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

            // FID observer
            const fidObserver = new PerformanceObserver((list) => {
              list.getEntries().forEach((entry) => {
                reportWebVitals({
                  name: 'FID',
                  value: entry.processingStart - entry.startTime,
                  rating: entry.processingStart - entry.startTime < 100 ? 'good' : entry.processingStart - entry.startTime < 300 ? 'needs-improvement' : 'poor',
                  id: 'fid-' + Date.now()
                });
              });
            });
            fidObserver.observe({ entryTypes: ['first-input'] });

            // CLS observer
            let clsValue = 0;
            const clsObserver = new PerformanceObserver((list) => {
              list.getEntries().forEach((entry) => {
                if (!entry.hadRecentInput) {
                  clsValue += entry.value;
                }
              });
            });
            clsObserver.observe({ entryTypes: ['layout-shift'] });

            // Report CLS on page hide
            window.addEventListener('visibilitychange', () => {
              if (document.visibilityState === 'hidden') {
                reportWebVitals({
                  name: 'CLS',
                  value: clsValue,
                  rating: clsValue < 0.1 ? 'good' : clsValue < 0.25 ? 'needs-improvement' : 'poor',
                  id: 'cls-' + Date.now()
                });
              }
            });
          } catch (e) {
            console.warn('Performance monitoring error:', e);
          }
        }

        // Custom performance marks
        window.addEventListener('load', () => {
          if (window.performance && window.performance.mark) {
            window.performance.mark('page-loaded');
            
            // Measure time to interactive
            const perfData = window.performance.timing;
            const pageLoadTime = perfData.loadEventEnd - perfData.navigationStart;
            const connectTime = perfData.responseEnd - perfData.requestStart;
            const renderTime = perfData.domComplete - perfData.domLoading;

            reportWebVitals({
              name: 'PageLoad',
              value: pageLoadTime,
              rating: pageLoadTime < 3000 ? 'good' : pageLoadTime < 5000 ? 'needs-improvement' : 'poor',
              id: 'pageload-' + Date.now()
            });
          }
        });
      })();
    </script>
    {import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY && (
      <script 
        src={`https://www.google.com/recaptcha/api.js?render=${import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY}`}
        async
        defer
      ></script>
    )}
</head>
<body>
    <div class="wrapper">
        <div class="preloader">
            <div class="loading"><span></span><span></span><span></span><span></span></div>
        </div>
        <Header />
        <main>
            <slot />
        </main>
        <Footer />
    </div>
    <script is:inline src="/assets/js/jquery-3.5.1.min.js"></script>
    <script is:inline src="/assets/js/plugins.js" defer></script>
    <script is:inline src="/assets/js/main.js" defer></script>
    
    <!-- Performance Enhancement Modules -->
    <script is:inline src="/src/js/modules/image-optimizer.js" defer></script>
    <script is:inline src="/src/js/modules/lazy-loader.js" defer></script>
    <script is:inline src="/src/js/modules/prefetcher.js" defer></script>
    
    <!-- Enhanced Image Loading -->
    <script is:inline>
      // Initialize image loading with modern features
      document.addEventListener('DOMContentLoaded', function() {
        // Mark content as loaded
        document.body.classList.add('content-loaded');
        document.body.classList.remove('content-loading');
        
        // Native lazy loading support check
        if ('loading' in HTMLImageElement.prototype) {
          const images = document.querySelectorAll('img[loading="lazy"]');
          images.forEach(img => {
            if (img.dataset.src) {
              img.src = img.dataset.src;
            }
          });
        } else {
          // Fallback for browsers that don't support lazy loading
          const script = document.createElement('script');
          script.src = 'https://cdn.jsdelivr.net/npm/lazysizes@5.3.2/lazysizes.min.js';
          document.body.appendChild(script);
        }
        
        // Performance mark
        if (window.performance && window.performance.mark) {
          window.performance.mark('content-ready');
          window.performance.measure('time-to-content', 'navigationStart', 'content-ready');
        }
      });
      
      // Service Worker registration (optional - for future PWA support)
      if ('serviceWorker' in navigator && window.location.protocol === 'https:') {
        window.addEventListener('load', () => {
          // Uncomment when service worker is ready
          // navigator.serviceWorker.register('/sw.js')
          //   .then(reg => console.log('Service Worker registered'))
          //   .catch(err => console.log('Service Worker registration failed'));
        });
      }
    </script>
</body>
</html>
